<api name="Abstract GPU" headerFile="agpu.h" constantPrefix="AGPU_" typePrefix="agpu_" functionPrefix="agpu" >
<version name="1.0">
    <types>
        <typedef name="byte" ctype="unsigned char" />
        <typedef name="sbyte" ctype="signed char" />
        <typedef name="short" ctype="signed short" />
        <typedef name="ushort" ctype="unsigned short" />
        <typedef name="int" ctype="signed int" />
        <typedef name="uint" ctype="unsigned int" />
        <typedef name="pointer" ctype="void*" />
        <typedef name="size" ctype="size_t" />
        <typedef name="enum" ctype="int" />
        <typedef name="bool" ctype="bool" />

        <typedef name="float" ctype="float" />
        <typedef name="double" ctype="double" />

        <typedef name="bitfield" ctype="unsigned int" />

        <typedef name="cstring" ctype="const char*" />
        <typedef name="string" ctype="const char*" />
        <typedef name="string_length" ctype="int" />

        <typedef name="cstring_buffer" ctype="char*" />
        <typedef name="string_buffer" ctype="char*" />
    </types>

	<structs>
        <struct name="device_open_info">
            <field name="display" type="pointer" />
            <field name="window" type="pointer" />
            <field name="surface" type="pointer" />
            <field name="red_size" type="int" />
            <field name="green_size" type="int" />
            <field name="blue_size" type="int" />
            <field name="alpha_size" type="int" />
            <field name="depth_size" type="int" />
            <field name="stencil_size" type="int" />
            <field name="doublebuffer" type="bool" />
            <field name="sample_buffers" type="bool" />
            <field name="samples" type="int" />
            <field name="debugLayer" type="bool" />
        </struct>

		<struct name="buffer_description">
			<field name="size" type="uint" />
			<field name="usage" type="buffer_usage_type" />
			<field name="binding" type="buffer_binding_type" />
			<field name="mapping_flags" type="bitfield" bits="buffer_mapping_flags" />
			<field name="stride" type="uint" />
		</struct>

		<struct name="draw_elements_command">
			<field name="index_count" type="uint" />
			<field name="instance_count" type="uint" />
			<field name="first_index" type="uint" />
			<field name="base_vertex" type="int" />
			<field name="base_instance" type="uint" />
		</struct>

        <struct name="vertex_attrib_description">
            <field name="buffer" type="uint" />
            <field name="binding" type="uint" />
            <field name="type" type="field_type" />
            <field name="components" type="uint" />
            <field name="rows" type="uint" />
            <field name="normalized" type="bool" />
            <field name="offset" type="size" />
            <field name="divisor" type="uint" />
        </struct>
	</structs>

    <constants>
        <enum name="error">
            <constant name="Ok" value="0" />
            <constant name="Error" value="-1" />
            <constant name="NullPointer" value="-2" />
            <constant name="InvalidOperation" value="-3" />
            <constant name="InvalidParameter" value="-4" />
            <constant name="OutOfBounds" value="-5" />
            <constant name="Unsupported" value="-6" />
            <constant name="Unimplemented" value="-7" />
            <constant name="NotCurrentContext" value="-8" />
            <constant name="CompilationError" value="-9" />
            <constant name="LinkingError" value="-9" />
            <constant name="CommandListClosed" value="-10" />
        </enum>

		<enum name="primitive_type">
            <constant name="PrimitiveTypePoint" value="0" />
            <constant name="PrimitiveTypeLine" value="1" />
            <constant name="PrimitiveTypeTriangle" value="2" />
            <constant name="PrimitiveTypePatch" value="3" />
		</enum>

		<enum name="primitive_topology">
            <constant name="Points" value="0" />

            <constant name="Lines" value="1" />
            <constant name="LinesAdjacency" value="2" />
            <constant name="LineStrip" value="3" />
            <constant name="LineStripAdjacency" value="4" />

            <constant name="Triangles" value="5" />
            <constant name="TrianglesAdjacency" value="6" />
            <constant name="TriangleStrip" value="7" />
            <constant name="TriangleStripAdjacency" value="8" />

            <constant name="Patches" value="9" />
		</enum>

        <enum name="stencil_operation">
            <constant name="Keep" value="0" />
            <constant name="Zero" value="1" />
            <constant name="Replace" value="2" />
            <constant name="Invert" value="3" />
            <constant name="Increase" value="4" />
            <constant name="IncreaseWrap" value="5" />
            <constant name="Decrease" value="6" />
            <constant name="DecreaseWrap" value="7" />
        </enum>

        <enum name="compare_function">
            <constant name="Always" value="0" />
            <constant name="Never" value="1" />
            <constant name="Less" value="2" />
            <constant name="LessEqual" value="3" />
            <constant name="Equal" value="4" />
            <constant name="NotEqual" value="5" />
            <constant name="Greater" value="6" />
            <constant name="GreaterEqual" value="7" />
        </enum>

        <enum name="texture_type">
            <constant name="TextureBuffer" value="0" />
            <constant name="Texture1D" value="1" />
            <constant name="Texture2D" value="2" />
            <constant name="TextureCube" value="3" />
            <constant name="Texture3D" value="4" />
            <constant name="TextureArray1D" value="5" />
            <constant name="TextureArray2D" value="6" />
            <constant name="TextureArrayCube" value="7" />
            <constant name="TextureArray3D" value="8" />
        </enum>

		<enum name="shader_type">
			<constant name="VertexShader" value="0" />
			<constant name="FragmentShader" value="1" />
			<constant name="GeometryShader" value="2" />
			<constant name="ComputeShader" value="3" />
			<constant name="TessellationControlShader" value="4" />
			<constant name="TessellationEvaluationShader" value="5" />
		</enum>

		<enum name="buffer_usage_type">
			<constant name="Static" value="0" />
			<constant name="Dynamic" value="1" />
			<constant name="Stream" value="2" />
		</enum>

		<enum name="buffer_binding_type">
			<constant name="ArrayBuffer" value="0" />
			<constant name="ElementArrayBuffer" value="1" />
			<constant name="UniformBuffer" value="2" />
			<constant name="DrawIndirectBuffer" value="3" />
		</enum>

		<enum name="buffer_mapping_flags">
			<constant name="MapReadBit" value="1" />
			<constant name="MapWriteBit" value="2" />
			<constant name="MapPersistentBit" value="4" />
			<constant name="MapCoherentBit" value="8" />
            <constant name="MapDynamicStorageBit" value="16" />
		</enum>

		<enum name="mapping_access">
			<constant name="ReadOnly" value="1" />
			<constant name="WriteOnly" value="2" />
			<constant name="ReadWrite" value="3" />
		</enum>

		<enum name="render_buffer_bit">
			<constant name="DepthBufferBit" value="1" />
			<constant name="StencilBufferBit" value="2" />
			<constant name="ColorBufferBit" value="4" />
		</enum>

		<enum name="shader_language">
            <constant name="ShaderLanguageNone" value="0" />
			<constant name="ShaderLanguageGlsl" value="1" />
            <constant name="ShaderLanguageEglsl" value="2" />
			<constant name="ShaderLanguageSpirV" value="3" />
            <constant name="ShaderLanguageHlsl" value="4" />
            <constant name="ShaderLanguageBinary" value="5" />
		</enum>

        <enum name="field_type">
            <constant name="Float" value="0" />
            <constant name="HalfFloat" value="1" />
            <constant name="Double" value="2" />
            <constant name="Fixed" value="3" />

            <constant name="Byte" value="4" />
            <constant name="UnsignedByte" value="5" />
            <constant name="Short" value="6" />
            <constant name="UnsignedShort" value="7" />
            <constant name="Int" value="8" />
            <constant name="UnsignedInt" value="9" />
        </enum>

        <enum name="texture_format">
            <constant name="TextureFormatUnknown" value="0" />
            <constant name="TextureFormatR32G32B32A32_Typeless" value="1" />
            <constant name="TextureFormatR32G32B32A32_Float" value="2" />
            <constant name="TextureFormatR32G32B32A32_UInt" value="3" />
            <constant name="TextureFormatR32G32B32A32_SInt" value="4" />
            <constant name="TextureFormatR32G32B32_Typeless" value="5" />
            <constant name="TextureFormatR32G32B32_Float" value="6" />
            <constant name="TextureFormatR32G32B32_UInt" value="7" />
            <constant name="TextureFormatR32G32B32_SInt" value="8" />

            <constant name="TextureFormatR16G16B16A16_Typeless" value="9" />
            <constant name="TextureFormatR16G16B16A16_Float" value="10" />
            <constant name="TextureFormatR16G16B16A16_UNorm" value="11" />
            <constant name="TextureFormatR16G16B16A16_UInt" value="12" />
            <constant name="TextureFormatR16G16B16A16_SNorm" value="13" />
            <constant name="TextureFormatR16G16B16A16_SInt" value="14" />

            <constant name="TextureFormatR32G32_Typeless" value="15" />
            <constant name="TextureFormatR32G32_Float" value="16" />
            <constant name="TextureFormatR32G32_UInt" value="17" />
            <constant name="TextureFormatR32G32_SInt" value="18" />
            <constant name="TextureFormatR32G8X24_Typeless" value="19" />

            <constant name="TextureFormatD32_Float_S8X24_UInt" value="20" />
            <constant name="TextureFormatR32_Float_S8X24_Typeless" value="21" />
            <constant name="TextureFormatX32_Typeless_G8X24_UInt" value="22" />

            <constant name="TextureFormatR10G10B10A3_Typeless" value="23" />
            <constant name="TextureFormatR10G10B10A3_UNorm" value="24" />
            <constant name="TextureFormatR10G10B10A3_UInt" value="25" />
            <constant name="TextureFormatR11G11B10A3_Float" value="26" />

            <constant name="TextureFormatR8G8B8A8_Typeless" value="27" />
            <constant name="TextureFormatR8G8B8A8_UNorm" value="28" />
            <constant name="TextureFormatR8G8B8A8_UNormSRGB" value="29" />
            <constant name="TextureFormatR8G8B8A8_UInt" value="30" />
            <constant name="TextureFormatR8G8B8A8_SNorm" value="31" />
            <constant name="TextureFormatR8G8B8A8_SInt" value="32" />

            <constant name="TextureFormatR16G16_Typeless" value="33" />
            <constant name="TextureFormatR16G16_Float" value="34" />
            <constant name="TextureFormatR16G16_UNorm" value="35" />
            <constant name="TextureFormatR16G16_UInt" value="36" />
            <constant name="TextureFormatR16G16_SNorm" value="37" />
            <constant name="TextureFormatR16G16_SInt" value="38" />

            <constant name="TextureFormatR32_Typeless" value="39" />
            <constant name="TextureFormatD32_Float" value="40" />
            <constant name="TextureFormatR32_Float" value="41" />
            <constant name="TextureFormatR32_UInt" value="42" />
            <constant name="TextureFormatR32_SInt" value="43" />

            <constant name="TextureFormatR24G8_Typeless" value="44" />
            <constant name="TextureFormatD24_UnormS8_UInt" value="45" />
            <constant name="TextureFormatR24_UnormX8_Typeless" value="46" />
            <constant name="TextureFormatX24TG8_UInt" value="47" />

            <constant name="TextureFormatR8G8_Typeless" value="48" />
            <constant name="TextureFormatR8G8_UNorm" value="49" />
            <constant name="TextureFormatR8G8_UInt" value="50" />
            <constant name="TextureFormatR8G8_SNorm" value="51" />
            <constant name="TextureFormatR8G8_SInt" value="52" />

            <constant name="TextureFormatR16_Typeless" value="53" />
            <constant name="TextureFormatR16_Float" value="54" />
            <constant name="TextureFormatD16_UNorm" value="55" />
            <constant name="TextureFormatR16_UNorm" value="56" />
            <constant name="TextureFormatR16_UInt" value="57" />
            <constant name="TextureFormatR16_SNorm" value="58" />
            <constant name="TextureFormatR16_SInt" value="59" />

            <constant name="TextureFormatR8_Typeless" value="60" />
            <constant name="TextureFormatR8_UNorm" value="61" />
            <constant name="TextureFormatR8_UInt" value="62" />
            <constant name="TextureFormatR8_SNorm" value="63" />
            <constant name="TextureFormatR8_SInt" value="64" />
            <constant name="TextureFormatA8_UNorm" value="65" />
            <constant name="TextureFormatR1_UNorm" value="66" />

            <constant name="TextureFormatBC1_Typeless" value="70" />
            <constant name="TextureFormatBC1_UNorm" value="71" />
            <constant name="TextureFormatBC1_UNormSRGB" value="72" />
            <constant name="TextureFormatBC2_Typeless" value="73" />
            <constant name="TextureFormatBC2_UNorm" value="74" />
            <constant name="TextureFormatBC2_UNormSRGB" value="75" />
            <constant name="TextureFormatBC3_Typeless" value="76" />
            <constant name="TextureFormatBC3_UNorm" value="77" />
            <constant name="TextureFormatBC3_UNormSRGB" value="78" />
            <constant name="TextureFormatBC4_Typeless" value="79" />
            <constant name="TextureFormatBC4_UNorm" value="80" />
            <constant name="TextureFormatBC4_SNorm" value="81" />
            <constant name="TextureFormatBC5_Typeless" value="82" />
            <constant name="TextureFormatBC5_UNorm" value="83" />
            <constant name="TextureFormatBC5_SNorm" value="84" />

            <constant name="TextureFormatB5G6R5_UNorm" value="85" />
            <constant name="TextureFormatB5G6R5A1_UNorm" value="86" />
            <constant name="TextureFormatB8G8R8A8_UNorm" value="87" />
            <constant name="TextureFormatB8G8R8X8_UNorm" value="88" />

            <constant name="TextureFormatB8G8R8A8_Typeless" value="90" />
            <constant name="TextureFormatB8G8R8A8_UNormSRGB" value="91" />
            <constant name="TextureFormatB8G8R8X8_Typeless" value="92" />
            <constant name="TextureFormatB8G8R8X8_UNormSRGB" value="93" />
        </enum>
    </constants>

    <globals>
        <function name="getPlatforms" cname="GetPlatforms" returnType="error" category="platform">
            <arg name="numplatforms" type="size" />
            <arg name="platforms" type="platform**" />
            <arg name="ret_numplatforms" type="size*" />
        </function>
    </globals>

    <interfaces>
        <interface name="platform">
            <method name="openDevice" cname="OpenDevice" returnType="device*">
                <arg name="openInfo" type="device_open_info*" />
            </method>

        </interface>

        <interface name="device">
            <method name="addReference" cname="AddDeviceReference" returnType="error">
            </method>

            <method name="release" cname="ReleaseDevice" returnType="error">
            </method>

            <method name="getDefaultCommandQueue" cname="GetDefaultCommandQueue" returnType="command_queue*">
            </method>

            <method name="swapBuffers" cname="SwapBuffers" returnType="error">
            </method>

            <method name="createBuffer" cname="CreateBuffer" returnType="buffer*">
                <arg name="description" type="buffer_description*" />
                <arg name="initial_data" type="pointer" />
            </method>

            <method name="createVertexLayout" cname="CreateVertexLayout" returnType="vertex_layout*">
            </method>

            <method name="createVertexBinding" cname="CreateVertexBinding" returnType="vertex_binding*">
                <arg name="layout" type="vertex_layout*" />
            </method>

            <method name="createShader" cname="CreateShader" returnType="shader*">
                <arg name="type" type="shader_type" />
            </method>

            <method name="createShaderResourceBinding" cname="CreateShaderResourceBinding" returnType="shader_resource_binding*">
                <arg name="bindingBank" type="int" />
            </method>

            <method name="createPipelineBuilder" cname="CreatePipelineBuilder" returnType="pipeline_builder*">
            </method>

            <method name="createCommandAllocator" cname="CreateCommandAllocator" returnType="command_allocator*">
            </method>

            <method name="createCommandListBundle" cname="CreateCommandListBundle" returnType="command_list*">
                <arg name="allocator" type="command_allocator*" />
                <arg name="initial_pipeline_state" type="pipeline_state*" />
            </method>

            <method name="createCommandList" cname="CreateCommandList" returnType="command_list*">
                <arg name="allocator" type="command_allocator*" />
                <arg name="initial_pipeline_state" type="pipeline_state*" />
            </method>

            <method name="getPreferredShaderLanguage" cname="GetPreferredShaderLanguage" returnType="shader_language">
            </method>

            <method name="getPreferredHighLevelShaderLanguage" cname="GetPreferredHighLevelShaderLanguage" returnType="shader_language">
            </method>

            <method name="getCurrentBackBuffer" cname="GetCurrentBackBuffer" returnType="framebuffer*">
            </method>

            <method name="createFrameBuffer" cname="CreateFrameBuffer" returnType="framebuffer*">
                <arg name="width" type="uint" />
                <arg name="height" type="uint" />
                <arg name="renderTargetCount" type="uint" />
                <arg name="hasDepth" type="bool" />
                <arg name="hasStencil" type="bool" />
            </method>
        </interface>

        <interface name="pipeline_builder">
            <method name="addReference" cname="AddPipelineBuilderReference" returnType="error">
            </method>

            <method name="release" cname="ReleasePipelineBuilder" returnType="error">
            </method>

            <method name="build" cname="BuildPipelineState" returnType="pipeline_state*">
            </method>

            <method name="attachShader" cname="AttachShader" returnType="error">
                <arg name="shader" type="shader*" />
            </method>

            <method name="getBuildingLogLength" cname="GetPipelineBuildingLogLength" returnType="size">
            </method>

            <method name="getBuildingLog" cname="GetPipelineBuildingLog" returnType="error">
                <arg name="buffer_size" type="size" />
                <arg name="buffer" type="string_buffer" />
            </method>

            <method name="setDepthState" cname="SetDepthState" returnType="error">
                <arg name="enabled" type="bool" />
                <arg name="writeMask" type="bool" />
                <arg name="function" type="compare_function" />
            </method>

            <method name="setStencilState" cname="SetStencilState" returnType="error">
                <arg name="enabled" type="bool" />
                <arg name="writeMask" type="int" />
                <arg name="readMask" type="int" />
            </method>

            <method name="setRenderTargetCount" cname="SetRenderTargetCount" returnType="error">
                <arg name="count" type="int" />
            </method>

            <method name="setPrimitiveType" cname="SetPrimitiveType" returnType="error">
                <arg name="type" type="primitive_type" />
            </method>

            <method name="setVertexLayout" cname="SetVertexLayout" returnType="error">
                <arg name="layout" type="vertex_layout*" />
            </method>

        </interface>

        <interface name="pipeline_state">
            <method name="addReference" cname="AddPipelineStateReference" returnType="error">
            </method>

            <method name="release" cname="ReleasePipelineState" returnType="error">
            </method>

            <method name="getUniformLocation" cname="GetUniformLocation" returnType="int">
                <arg name="name" type="cstring" />
            </method>
        </interface>

        <interface name="command_queue">
            <method name="addReference" cname="AddCommandQueueReference" returnType="error">
            </method>

            <method name="release" cname="ReleaseCommandQueue" returnType="error">
            </method>

            <method name="addCommandList" cname="AddCommandList" returnType="error">
                <arg name="command_list" type="command_list*" />
            </method>
        </interface>

        <interface name="command_allocator">
            <method name="addReference" cname="AddCommandAllocatorReference" returnType="error">
            </method>

            <method name="release" cname="ReleaseCommandAllocator" returnType="error">
            </method>

            <method name="reset" cname="ResetCommandAllocator" returnType="error">
            </method>
        </interface>

        <interface name="command_list">
            <method name="addReference" cname="AddCommandListReference" returnType="error">
            </method>

            <method name="release" cname="ReleaseCommandList" returnType="error">
            </method>

            <method name="setViewport" cname="SetViewport" returnType="error">
                <arg name="x" type="int" />
                <arg name="y" type="int" />
                <arg name="w" type="int" />
                <arg name="h" type="int" />
            </method>

            <method name="setScissor" cname="SetScissor" returnType="error">
                <arg name="x" type="int" />
                <arg name="y" type="int" />
                <arg name="w" type="int" />
                <arg name="h" type="int" />
            </method>

            <method name="setClearColor" cname="SetClearColor" returnType="error">
                <arg name="r" type="float" />
                <arg name="g" type="float" />
                <arg name="b" type="float" />
                <arg name="a" type="float" />
            </method>

            <method name="setClearDepth" cname="SetClearDepth" returnType="error">
                <arg name="depth" type="float" />
            </method>

            <method name="setClearStencil" cname="SetClearStencil" returnType="error">
                <arg name="value" type="int" />
            </method>

            <method name="clear" cname="Clear" returnType="error">
                <arg name="buffers" type="bitfield" />
            </method>

            <method name="usePipelineState" cname="UsePipelineState" returnType="error">
                <arg name="pipeline" type="pipeline_state*" />
            </method>

            <method name="useVertexBinding" cname="UseVertexBinding" returnType="error">
                <arg name="vertex_binding" type="vertex_binding*" />
            </method>

            <method name="useIndexBuffer" cname="UseIndexBuffer" returnType="error">
                <arg name="index_buffer" type="buffer*" />
            </method>

            <method name="setPrimitiveTopology" cname="SetPrimitiveTopology" returnType="error">
                <arg name="topology" type="primitive_topology" />
            </method>

            <method name="useDrawIndirectBuffer" cname="UseDrawIndirectBuffer" returnType="error">
                <arg name="draw_buffer" type="buffer*" />
            </method>

            <method name="useShaderResources" cname="UseShaderResources" returnType="error">
                <arg name="binding" type="shader_resource_binding*" />
            </method>

            <method name="drawArrays" cname="DrawArrays" returnType="error">
    			<arg name="vertex_count" type="uint" />
    			<arg name="instance_count" type="uint" />
    			<arg name="first_vertex" type="uint" />
    			<arg name="base_instance" type="uint" />
            </method>

            <method name="drawElements" cname="DrawElements" returnType="error">
    			<arg name="index_count" type="uint" />
    			<arg name="instance_count" type="uint" />
    			<arg name="first_index" type="uint" />
    			<arg name="base_vertex" type="int" />
    			<arg name="base_instance" type="uint" />
            </method>

            <method name="drawElementsIndirect" cname="DrawElementsIndirect" returnType="error">
                <arg name="offset" type="size" />
            </method>

            <method name="multiDrawElementsIndirect" cname="MultiDrawElementsIndirect" returnType="error">
                <arg name="offset" type="size" />
                <arg name="drawcount" type="size" />
            </method>

            <method name="setStencilReference" cname="SetStencilReference" returnType="error">
                <arg name="reference" type="float" />
            </method>

            <method name="setAlphaReference" cname="SetAlphaReference" returnType="error">
                <arg name="reference" type="float" />
            </method>

            <method name="executeBundle" cname="ExecuteBundle" returnType="error">
                <arg name="bundle" type="command_list*" />
            </method>

            <method name="close" cname="CloseCommandList" returnType="error">
            </method>

            <method name="reset" cname="ResetCommandList" returnType="error">
                <arg name="allocator" type="command_allocator*" />
                <arg name="initial_pipeline_state" type="pipeline_state*" />
            </method>

            <method name="beginFrame" cname="BeginFrame" returnType="error">
                <arg name="framebuffer" type="framebuffer*" />
            </method>

            <method name="endFrame" cname="EndFrame" returnType="error">
            </method>

        </interface>

        <interface name="texture">
            <method name="addReference" cname="AddTextureReference" returnType="error">
            </method>

            <method name="release" cname="ReleaseTexture" returnType="error">
            </method>

        </interface>

        <interface name="buffer">
            <method name="addReference" cname="AddBufferReference" returnType="error">
            </method>

            <method name="release" cname="ReleaseBuffer" returnType="error">
            </method>

            <method name="mapBuffer" cname="MapBuffer" returnType="pointer">
                <arg name="flags" type="mapping_access"/>
            </method>

            <method name="unmapBuffer" cname="UnmapBuffer" returnType="error">
            </method>

            <method name="uploadBufferData" cname="UploadBufferData" returnType="error">
                <arg name="offset" type="size" />
                <arg name="size" type="size" />
                <arg name="data" type="pointer"/>
            </method>
        </interface>

        <interface name="vertex_binding">
            <method name="addReference" cname="AddVertexBindingReference" returnType="error">
            </method>

            <method name="release" cname="ReleaseVertexBinding" returnType="error">
            </method>

            <method name="bindVertexBuffers" cname="BindVertexBuffers" returnType="error">
                <arg name="count" type="uint" />
                <arg name="vertex_buffers" type="buffer**" />
            </method>
        </interface>

        <interface name="vertex_layout">
            <method name="addReference" cname="AddVertexLayoutReference" returnType="error">
            </method>

            <method name="release" cname="ReleaseVertexLayout" returnType="error">
            </method>

            <method name="addVertexAttributeBindings" cname="AddVertexAttributeBindings" returnType="error">
                <arg name="vertex_buffer_count" type="uint" />
                <arg name="attribute_count" type="size" />
                <arg name="attributes" type="vertex_attrib_description*" />
            </method>
        </interface>

        <interface name="shader">
            <method name="addReference" cname="AddShaderReference" returnType="error">
            </method>

            <method name="release" cname="ReleaseShader" returnType="error">
            </method>

            <method name="setShaderSource" cname="SetShaderSource" returnType="error">
                <arg name="language" type="shader_language" />
                <arg name="sourceText" type="string" />
                <arg name="sourceTextLength" type="string_length" />
            </method>

            <method name="compileShader" cname="CompileShader" returnType="error">
                <arg name="options" type="cstring" />
            </method>

            <method name="getCompilationLogLength" cname="GetShaderCompilationLogLength" returnType="size">
            </method>

            <method name="getCompilationLog" cname="GetShaderCompilationLog" returnType="error">
                <arg name="buffer_size" type="size" />
                <arg name="buffer" type="string_buffer" />
            </method>

            <method name="bindAttributeLocation" cname="BindAttributeLocation" returnType="error">
                <arg name="name" type="cstring" />
                <arg name="location" type="int" />
            </method>
        </interface>

        <interface name="framebuffer">
            <method name="addReference" cname="AddFramebufferReference" returnType="error">
            </method>

            <method name="release" cname="ReleaseFramebuffer" returnType="error">
            </method>

            <method name="isMainFrameBuffer" cname="IsMainFrameBuffer" returnType="bool">
            </method>
        </interface>

        <interface name="shader_resource_binding">
            <method name="addReference" cname="AddShaderResourceBindingReference" returnType="error">
            </method>

            <method name="release" cname="ReleaseShaderResourceBinding" returnType="error">
            </method>

            <method name="bindUniformBuffer" cname="BindUniformBuffer" returnType="error">
                <arg name="location" type="int" />
                <arg name="uniform_buffer" type="buffer*" />
            </method>

            <method name="bindUniformBufferRange" cname="BindUniformBufferRange" returnType="error">
                <arg name="location" type="int" />
                <arg name="uniform_buffer" type="buffer*" />
                <arg name="offset" type="size" />
                <arg name="size" type="size" />
            </method>
        </interface>
    </interfaces>
</version>
</api>
